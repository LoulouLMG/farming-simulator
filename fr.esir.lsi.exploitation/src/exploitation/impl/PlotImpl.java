/**
 */
package exploitation.impl;

import exploitation.ExploitationPackage;
import exploitation.Plot;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Plot</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link exploitation.impl.PlotImpl#isIrrigated <em>Irrigated</em>}</li>
 *   <li>{@link exploitation.impl.PlotImpl#getHectare <em>Hectare</em>}</li>
 *   <li>{@link exploitation.impl.PlotImpl#getId <em>Id</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class PlotImpl extends MinimalEObjectImpl.Container implements Plot {
	/**
	 * The default value of the '{@link #isIrrigated() <em>Irrigated</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIrrigated()
	 * @generated
	 * @ordered
	 */
	protected static final boolean IRRIGATED_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isIrrigated() <em>Irrigated</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIrrigated()
	 * @generated
	 * @ordered
	 */
	protected boolean irrigated = IRRIGATED_EDEFAULT;

	/**
	 * The default value of the '{@link #getHectare() <em>Hectare</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getHectare()
	 * @generated
	 * @ordered
	 */
	protected static final int HECTARE_EDEFAULT = 0;

	/**
	 * The cached value of the '{@link #getHectare() <em>Hectare</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getHectare()
	 * @generated
	 * @ordered
	 */
	protected int hectare = HECTARE_EDEFAULT;

	/**
	 * The default value of the '{@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getId()
	 * @generated
	 * @ordered
	 */
	protected static final int ID_EDEFAULT = 0;

	/**
	 * The cached value of the '{@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getId()
	 * @generated
	 * @ordered
	 */
	protected int id = ID_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlotImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return ExploitationPackage.Literals.PLOT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isIrrigated() {
		return irrigated;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setIrrigated(boolean newIrrigated) {
		boolean oldIrrigated = irrigated;
		irrigated = newIrrigated;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ExploitationPackage.PLOT__IRRIGATED, oldIrrigated, irrigated));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getHectare() {
		return hectare;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHectare(int newHectare) {
		int oldHectare = hectare;
		hectare = newHectare;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ExploitationPackage.PLOT__HECTARE, oldHectare, hectare));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getId() {
		return id;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setId(int newId) {
		int oldId = id;
		id = newId;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ExploitationPackage.PLOT__ID, oldId, id));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case ExploitationPackage.PLOT__IRRIGATED:
				return isIrrigated();
			case ExploitationPackage.PLOT__HECTARE:
				return getHectare();
			case ExploitationPackage.PLOT__ID:
				return getId();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case ExploitationPackage.PLOT__IRRIGATED:
				setIrrigated((Boolean)newValue);
				return;
			case ExploitationPackage.PLOT__HECTARE:
				setHectare((Integer)newValue);
				return;
			case ExploitationPackage.PLOT__ID:
				setId((Integer)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case ExploitationPackage.PLOT__IRRIGATED:
				setIrrigated(IRRIGATED_EDEFAULT);
				return;
			case ExploitationPackage.PLOT__HECTARE:
				setHectare(HECTARE_EDEFAULT);
				return;
			case ExploitationPackage.PLOT__ID:
				setId(ID_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case ExploitationPackage.PLOT__IRRIGATED:
				return irrigated != IRRIGATED_EDEFAULT;
			case ExploitationPackage.PLOT__HECTARE:
				return hectare != HECTARE_EDEFAULT;
			case ExploitationPackage.PLOT__ID:
				return id != ID_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (irrigated: ");
		result.append(irrigated);
		result.append(", hectare: ");
		result.append(hectare);
		result.append(", id: ");
		result.append(id);
		result.append(')');
		return result.toString();
	}

} //PlotImpl
