package fr.esir.lsi.simulation.exploitation

import exploitation.Exploitation
import exploitation.Surface
import fr.inria.diverse.k3.al.annotationprocessor.Aspect
import java.util.Date

import static extension fr.esir.lsi.simulation.exploitation.SurfaceAspect.*

@Aspect(className=Exploitation)
class ExploitationAspect {

	def void display() {
		println("I AM AN EXPLOITATION :D")
	}

	def void add(Surface s) {
		_self.surface.add(s)
	}

	def void displaySurfaces() {
		println("Surfaces of " + _self.name + " : " + _self.surface.size)
	}

	def void compile() {
	}

	def boolean isIrrigated() {
		var result = true;

		var surfaces = _self.surface

		for (s : surfaces) {
			var parcelles = s.parcelle

			for (p : parcelles) {
				result = result && p.irrigated
				println(p.id + " is irrigated : " + p.irrigated)
			}
		}

		return result
	}

	def float getWaterNeeded(Date date) {

		var float result = 0

		for (s : _self.surface) {
			result += s.getWaterNeeded(date)
		}

		return result

	}

	def boolean haveSurfacesThatNeedIrrigation() {
		var result = false;
		var need = 0
		var needNot = 0

		for (s : _self.surface) {
			if (s.isCorn()) {
				need++
			} else {
				needNot++
			}
		}

		result = (need != 0)

		println(
			"The exploitation " + _self.name + " has " + need + " surface(s) that will need irrigation and " + needNot +
				" that won't.")

		return result;
	}
}
