/**
 */
package activity.impl;

import activity.ActivityPackage;
import activity.Date;
import activity.PeriodicActivity;
import activity.Predicate;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Predicate</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link activity.impl.PredicateImpl#getLinkedActivity <em>Linked Activity</em>}</li>
 *   <li>{@link activity.impl.PredicateImpl#getLinkedDate <em>Linked Date</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class PredicateImpl extends MinimalEObjectImpl.Container implements Predicate {
	/**
	 * The cached value of the '{@link #getLinkedActivity() <em>Linked Activity</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLinkedActivity()
	 * @generated
	 * @ordered
	 */
	protected PeriodicActivity linkedActivity;
	/**
	 * The cached value of the '{@link #getLinkedDate() <em>Linked Date</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLinkedDate()
	 * @generated
	 * @ordered
	 */
	protected Date linkedDate;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PredicateImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return ActivityPackage.Literals.PREDICATE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PeriodicActivity getLinkedActivity() {
		if (linkedActivity != null && linkedActivity.eIsProxy()) {
			InternalEObject oldLinkedActivity = (InternalEObject)linkedActivity;
			linkedActivity = (PeriodicActivity)eResolveProxy(oldLinkedActivity);
			if (linkedActivity != oldLinkedActivity) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, ActivityPackage.PREDICATE__LINKED_ACTIVITY, oldLinkedActivity, linkedActivity));
			}
		}
		return linkedActivity;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PeriodicActivity basicGetLinkedActivity() {
		return linkedActivity;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLinkedActivity(PeriodicActivity newLinkedActivity) {
		PeriodicActivity oldLinkedActivity = linkedActivity;
		linkedActivity = newLinkedActivity;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ActivityPackage.PREDICATE__LINKED_ACTIVITY, oldLinkedActivity, linkedActivity));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Date getLinkedDate() {
		return linkedDate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetLinkedDate(Date newLinkedDate, NotificationChain msgs) {
		Date oldLinkedDate = linkedDate;
		linkedDate = newLinkedDate;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ActivityPackage.PREDICATE__LINKED_DATE, oldLinkedDate, newLinkedDate);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLinkedDate(Date newLinkedDate) {
		if (newLinkedDate != linkedDate) {
			NotificationChain msgs = null;
			if (linkedDate != null)
				msgs = ((InternalEObject)linkedDate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ActivityPackage.PREDICATE__LINKED_DATE, null, msgs);
			if (newLinkedDate != null)
				msgs = ((InternalEObject)newLinkedDate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ActivityPackage.PREDICATE__LINKED_DATE, null, msgs);
			msgs = basicSetLinkedDate(newLinkedDate, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ActivityPackage.PREDICATE__LINKED_DATE, newLinkedDate, newLinkedDate));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case ActivityPackage.PREDICATE__LINKED_DATE:
				return basicSetLinkedDate(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case ActivityPackage.PREDICATE__LINKED_ACTIVITY:
				if (resolve) return getLinkedActivity();
				return basicGetLinkedActivity();
			case ActivityPackage.PREDICATE__LINKED_DATE:
				return getLinkedDate();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case ActivityPackage.PREDICATE__LINKED_ACTIVITY:
				setLinkedActivity((PeriodicActivity)newValue);
				return;
			case ActivityPackage.PREDICATE__LINKED_DATE:
				setLinkedDate((Date)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case ActivityPackage.PREDICATE__LINKED_ACTIVITY:
				setLinkedActivity((PeriodicActivity)null);
				return;
			case ActivityPackage.PREDICATE__LINKED_DATE:
				setLinkedDate((Date)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case ActivityPackage.PREDICATE__LINKED_ACTIVITY:
				return linkedActivity != null;
			case ActivityPackage.PREDICATE__LINKED_DATE:
				return linkedDate != null;
		}
		return super.eIsSet(featureID);
	}

} //PredicateImpl
