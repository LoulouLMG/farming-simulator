/*
* generated by Xtext
*/
package fr.esir.lsi.exploitation.farmingdsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FarmingGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRessourceTypesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonSpaceKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cRessourceTypesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cRessourceTypesResourceTypeParserRuleCall_3_2_0 = (RuleCall)cRessourceTypesAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cRessourceTypesAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cRessourceTypesResourceTypeParserRuleCall_3_3_1_0 = (RuleCall)cRessourceTypesAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cActivitiesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cActivitiesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cActivitiesPeriodicActivityParserRuleCall_4_2_0 = (RuleCall)cActivitiesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cActivitiesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cActivitiesPeriodicActivityParserRuleCall_4_3_1_0 = (RuleCall)cActivitiesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Model returns activity::Model:
		//	{activity::Model} "model" "{" ("ressourceTypes" ": " ressourceTypes+=ResourceType (","
		//	ressourceTypes+=ResourceType)*)? ("activities" "{" activities+=PeriodicActivity ("," activities+=PeriodicActivity)*
		//	"}")? "}";
		public ParserRule getRule() { return rule; }

		//{activity::Model} "model" "{" ("ressourceTypes" ": " ressourceTypes+=ResourceType ("," ressourceTypes+=ResourceType)*)?
		//("activities" "{" activities+=PeriodicActivity ("," activities+=PeriodicActivity)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{activity::Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//"model"
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("ressourceTypes" ": " ressourceTypes+=ResourceType ("," ressourceTypes+=ResourceType)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"ressourceTypes"
		public Keyword getRessourceTypesKeyword_3_0() { return cRessourceTypesKeyword_3_0; }

		//": "
		public Keyword getColonSpaceKeyword_3_1() { return cColonSpaceKeyword_3_1; }

		//ressourceTypes+=ResourceType
		public Assignment getRessourceTypesAssignment_3_2() { return cRessourceTypesAssignment_3_2; }

		//ResourceType
		public RuleCall getRessourceTypesResourceTypeParserRuleCall_3_2_0() { return cRessourceTypesResourceTypeParserRuleCall_3_2_0; }

		//("," ressourceTypes+=ResourceType)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//ressourceTypes+=ResourceType
		public Assignment getRessourceTypesAssignment_3_3_1() { return cRessourceTypesAssignment_3_3_1; }

		//ResourceType
		public RuleCall getRessourceTypesResourceTypeParserRuleCall_3_3_1_0() { return cRessourceTypesResourceTypeParserRuleCall_3_3_1_0; }

		//("activities" "{" activities+=PeriodicActivity ("," activities+=PeriodicActivity)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"activities"
		public Keyword getActivitiesKeyword_4_0() { return cActivitiesKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//activities+=PeriodicActivity
		public Assignment getActivitiesAssignment_4_2() { return cActivitiesAssignment_4_2; }

		//PeriodicActivity
		public RuleCall getActivitiesPeriodicActivityParserRuleCall_4_2_0() { return cActivitiesPeriodicActivityParserRuleCall_4_2_0; }

		//("," activities+=PeriodicActivity)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//activities+=PeriodicActivity
		public Assignment getActivitiesAssignment_4_3_1() { return cActivitiesAssignment_4_3_1; }

		//PeriodicActivity
		public RuleCall getActivitiesPeriodicActivityParserRuleCall_4_3_1_0() { return cActivitiesPeriodicActivityParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ResourceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResourceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ResourceType returns activity::ResourceType:
		//	{activity::ResourceType} name=EString;
		public ParserRule getRule() { return rule; }

		//{activity::ResourceType} name=EString
		public Group getGroup() { return cGroup; }

		//{activity::ResourceType}
		public Action getResourceTypeAction_0() { return cResourceTypeAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class PeriodicActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PeriodicActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPeriodicActivityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPeriodicActivityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEachKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPeriodicityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPeriodicityEIntParserRuleCall_4_1_0 = (RuleCall)cPeriodicityAssignment_4_1.eContents().get(0);
		private final Assignment cPeriodicityLitteralAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPeriodicityLitteralPeriodicEnumRuleCall_4_2_0 = (RuleCall)cPeriodicityLitteralAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFromKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStartAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStartDateParserRuleCall_5_1_0 = (RuleCall)cStartAssignment_5_1.eContents().get(0);
		private final Keyword cToKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cEndAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cEndDateParserRuleCall_5_3_0 = (RuleCall)cEndAssignment_5_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRulesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRulesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cRulesRuleParserRuleCall_6_2_0 = (RuleCall)cRulesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cRulesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_6_3_1_0 = (RuleCall)cRulesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAllocationsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cAllocationsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cAllocationsResourceAllocationParserRuleCall_7_2_0 = (RuleCall)cAllocationsAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cAllocationsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cAllocationsResourceAllocationParserRuleCall_7_3_1_0 = (RuleCall)cAllocationsAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//PeriodicActivity returns activity::PeriodicActivity:
		//	{activity::PeriodicActivity} "PeriodicActivity " name=EString "{" ("each" periodicity=EInt
		//	periodicityLitteral=Periodic)? ("from" start=Date "to" end=Date)? ("rules" "{" rules+=Rule ("," rules+=Rule)* "}")?
		//	("allocations" "{" allocations+=ResourceAllocation ("," allocations+=ResourceAllocation)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{activity::PeriodicActivity} "PeriodicActivity " name=EString "{" ("each" periodicity=EInt
		//periodicityLitteral=Periodic)? ("from" start=Date "to" end=Date)? ("rules" "{" rules+=Rule ("," rules+=Rule)* "}")?
		//("allocations" "{" allocations+=ResourceAllocation ("," allocations+=ResourceAllocation)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{activity::PeriodicActivity}
		public Action getPeriodicActivityAction_0() { return cPeriodicActivityAction_0; }

		//"PeriodicActivity "
		public Keyword getPeriodicActivityKeyword_1() { return cPeriodicActivityKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("each" periodicity=EInt periodicityLitteral=Periodic)?
		public Group getGroup_4() { return cGroup_4; }

		//"each"
		public Keyword getEachKeyword_4_0() { return cEachKeyword_4_0; }

		//periodicity=EInt
		public Assignment getPeriodicityAssignment_4_1() { return cPeriodicityAssignment_4_1; }

		//EInt
		public RuleCall getPeriodicityEIntParserRuleCall_4_1_0() { return cPeriodicityEIntParserRuleCall_4_1_0; }

		//periodicityLitteral=Periodic
		public Assignment getPeriodicityLitteralAssignment_4_2() { return cPeriodicityLitteralAssignment_4_2; }

		//Periodic
		public RuleCall getPeriodicityLitteralPeriodicEnumRuleCall_4_2_0() { return cPeriodicityLitteralPeriodicEnumRuleCall_4_2_0; }

		//("from" start=Date "to" end=Date)?
		public Group getGroup_5() { return cGroup_5; }

		//"from"
		public Keyword getFromKeyword_5_0() { return cFromKeyword_5_0; }

		//start=Date
		public Assignment getStartAssignment_5_1() { return cStartAssignment_5_1; }

		//Date
		public RuleCall getStartDateParserRuleCall_5_1_0() { return cStartDateParserRuleCall_5_1_0; }

		//"to"
		public Keyword getToKeyword_5_2() { return cToKeyword_5_2; }

		//end=Date
		public Assignment getEndAssignment_5_3() { return cEndAssignment_5_3; }

		//Date
		public RuleCall getEndDateParserRuleCall_5_3_0() { return cEndDateParserRuleCall_5_3_0; }

		//("rules" "{" rules+=Rule ("," rules+=Rule)* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"rules"
		public Keyword getRulesKeyword_6_0() { return cRulesKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//rules+=Rule
		public Assignment getRulesAssignment_6_2() { return cRulesAssignment_6_2; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_6_2_0() { return cRulesRuleParserRuleCall_6_2_0; }

		//("," rules+=Rule)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//rules+=Rule
		public Assignment getRulesAssignment_6_3_1() { return cRulesAssignment_6_3_1; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_6_3_1_0() { return cRulesRuleParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }

		//("allocations" "{" allocations+=ResourceAllocation ("," allocations+=ResourceAllocation)* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"allocations"
		public Keyword getAllocationsKeyword_7_0() { return cAllocationsKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//allocations+=ResourceAllocation
		public Assignment getAllocationsAssignment_7_2() { return cAllocationsAssignment_7_2; }

		//ResourceAllocation
		public RuleCall getAllocationsResourceAllocationParserRuleCall_7_2_0() { return cAllocationsResourceAllocationParserRuleCall_7_2_0; }

		//("," allocations+=ResourceAllocation)*
		public Group getGroup_7_3() { return cGroup_7_3; }

		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }

		//allocations+=ResourceAllocation
		public Assignment getAllocationsAssignment_7_3_1() { return cAllocationsAssignment_7_3_1; }

		//ResourceAllocation
		public RuleCall getAllocationsResourceAllocationParserRuleCall_7_3_1_0() { return cAllocationsResourceAllocationParserRuleCall_7_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDayINTTerminalRuleCall_1_0 = (RuleCall)cDayAssignment_1.eContents().get(0);
		private final Assignment cMonthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMonthMonthEnumRuleCall_2_0 = (RuleCall)cMonthAssignment_2.eContents().get(0);
		private final Assignment cYearAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYearINTTerminalRuleCall_3_0 = (RuleCall)cYearAssignment_3.eContents().get(0);
		
		//Date returns activity::Date:
		//	{activity::Date} day=INT month=Month year=INT;
		public ParserRule getRule() { return rule; }

		//{activity::Date} day=INT month=Month year=INT
		public Group getGroup() { return cGroup; }

		//{activity::Date}
		public Action getDateAction_0() { return cDateAction_0; }

		//day=INT
		public Assignment getDayAssignment_1() { return cDayAssignment_1; }

		//INT
		public RuleCall getDayINTTerminalRuleCall_1_0() { return cDayINTTerminalRuleCall_1_0; }

		//month=Month
		public Assignment getMonthAssignment_2() { return cMonthAssignment_2; }

		//Month
		public RuleCall getMonthMonthEnumRuleCall_2_0() { return cMonthMonthEnumRuleCall_2_0; }

		//year=INT
		public Assignment getYearAssignment_3() { return cYearAssignment_3; }

		//INT
		public RuleCall getYearINTTerminalRuleCall_3_0() { return cYearINTTerminalRuleCall_3_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPredicatesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPredicatesPredicateParserRuleCall_1_0_0 = (RuleCall)cPredicatesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cORKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cANDKeyword_1_1_0_2 = (Keyword)cAlternatives_1_1_0.eContents().get(2);
		private final Assignment cPredicatesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPredicatesPredicateParserRuleCall_1_1_1_0 = (RuleCall)cPredicatesAssignment_1_1_1.eContents().get(0);
		
		//Rule returns activity::Rule:
		//	{activity::Rule} (predicates+=Predicate (("," | "OR" | "AND") predicates+=Predicate)*)?;
		public ParserRule getRule() { return rule; }

		//{activity::Rule} (predicates+=Predicate (("," | "OR" | "AND") predicates+=Predicate)*)?
		public Group getGroup() { return cGroup; }

		//{activity::Rule}
		public Action getRuleAction_0() { return cRuleAction_0; }

		//(predicates+=Predicate (("," | "OR" | "AND") predicates+=Predicate)*)?
		public Group getGroup_1() { return cGroup_1; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_1_0() { return cPredicatesAssignment_1_0; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_1_0_0() { return cPredicatesPredicateParserRuleCall_1_0_0; }

		//(("," | "OR" | "AND") predicates+=Predicate)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"," | "OR" | "AND"
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//","
		public Keyword getCommaKeyword_1_1_0_0() { return cCommaKeyword_1_1_0_0; }

		//"OR"
		public Keyword getORKeyword_1_1_0_1() { return cORKeyword_1_1_0_1; }

		//"AND"
		public Keyword getANDKeyword_1_1_0_2() { return cANDKeyword_1_1_0_2; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_1_1_1() { return cPredicatesAssignment_1_1_1; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_1_1_1_0() { return cPredicatesPredicateParserRuleCall_1_1_1_0; }
	}

	public class ResourceAllocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceAllocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceResourceTypeCrossReference_1_0 = (CrossReference)cResourceAssignment_1.eContents().get(0);
		private final RuleCall cResourceResourceTypeEStringParserRuleCall_1_0_1 = (RuleCall)cResourceResourceTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDurationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDurationEIntParserRuleCall_2_1_0 = (RuleCall)cDurationAssignment_2_1.eContents().get(0);
		private final Keyword cHoursKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ResourceAllocation returns activity::ResourceAllocation:
		//	"resource" resource=[activity::ResourceType|EString] ("for" duration=EInt "hours")?;
		public ParserRule getRule() { return rule; }

		//"resource" resource=[activity::ResourceType|EString] ("for" duration=EInt "hours")?
		public Group getGroup() { return cGroup; }

		//"resource"
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }

		//resource=[activity::ResourceType|EString]
		public Assignment getResourceAssignment_1() { return cResourceAssignment_1; }

		//[activity::ResourceType|EString]
		public CrossReference getResourceResourceTypeCrossReference_1_0() { return cResourceResourceTypeCrossReference_1_0; }

		//EString
		public RuleCall getResourceResourceTypeEStringParserRuleCall_1_0_1() { return cResourceResourceTypeEStringParserRuleCall_1_0_1; }

		//("for" duration=EInt "hours")?
		public Group getGroup_2() { return cGroup_2; }

		//"for"
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }

		//duration=EInt
		public Assignment getDurationAssignment_2_1() { return cDurationAssignment_2_1; }

		//EInt
		public RuleCall getDurationEIntParserRuleCall_2_1_0() { return cDurationEIntParserRuleCall_2_1_0; }

		//"hours"
		public Keyword getHoursKeyword_2_2() { return cHoursKeyword_2_2; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cNoRainedTheLastKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cEIntParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Keyword cDaysKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cTemperatureKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLinkedSymbolAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLinkedSymbolSymbolEnumRuleCall_1_1_1_0 = (RuleCall)cLinkedSymbolAssignment_1_1_1.eContents().get(0);
		private final Keyword cThanKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final RuleCall cEIntParserRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		private final Keyword cCKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cTKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cLinkedSymbolAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cLinkedSymbolSymbolEnumRuleCall_1_2_1_0 = (RuleCall)cLinkedSymbolAssignment_1_2_1.eContents().get(0);
		private final Keyword cThanKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cLinkedDateAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cLinkedDateDateParserRuleCall_1_2_3_0 = (RuleCall)cLinkedDateAssignment_1_2_3.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Alternatives cAlternatives_1_3_0 = (Alternatives)cGroup_1_3.eContents().get(0);
		private final Keyword cRayKeyword_1_3_0_0 = (Keyword)cAlternatives_1_3_0.eContents().get(0);
		private final Keyword cParKeyword_1_3_0_1 = (Keyword)cAlternatives_1_3_0.eContents().get(1);
		private final Assignment cLinkedSymbolAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cLinkedSymbolSymbolEnumRuleCall_1_3_1_0 = (RuleCall)cLinkedSymbolAssignment_1_3_1.eContents().get(0);
		private final Keyword cThanKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final RuleCall cEIntParserRuleCall_1_3_3 = (RuleCall)cGroup_1_3.eContents().get(3);
		private final Keyword cSeedMaturityKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final RuleCall cEIntParserRuleCall_1_5_0 = (RuleCall)cGroup_1_5.eContents().get(0);
		private final Alternatives cAlternatives_1_5_1 = (Alternatives)cGroup_1_5.eContents().get(1);
		private final Keyword cHoursKeyword_1_5_1_0 = (Keyword)cAlternatives_1_5_1.eContents().get(0);
		private final Keyword cDaysKeyword_1_5_1_1 = (Keyword)cAlternatives_1_5_1.eContents().get(1);
		private final Keyword cWeeksKeyword_1_5_1_2 = (Keyword)cAlternatives_1_5_1.eContents().get(2);
		private final Keyword cMonthsKeyword_1_5_1_3 = (Keyword)cAlternatives_1_5_1.eContents().get(3);
		private final Keyword cYearsKeyword_1_5_1_4 = (Keyword)cAlternatives_1_5_1.eContents().get(4);
		private final Keyword cAfterKeyword_1_5_2 = (Keyword)cGroup_1_5.eContents().get(2);
		private final Assignment cLinkedActivityAssignment_1_5_3 = (Assignment)cGroup_1_5.eContents().get(3);
		private final CrossReference cLinkedActivityPeriodicActivityCrossReference_1_5_3_0 = (CrossReference)cLinkedActivityAssignment_1_5_3.eContents().get(0);
		private final RuleCall cLinkedActivityPeriodicActivityEStringParserRuleCall_1_5_3_0_1 = (RuleCall)cLinkedActivityPeriodicActivityCrossReference_1_5_3_0.eContents().get(1);
		
		//Predicate returns activity::Predicate:
		//	{activity::Predicate} ("no rained the last " EInt " days" | "temperature " linkedSymbol=Symbol "than" EInt "0C" |
		//	"t " linkedSymbol=Symbol "than" linkedDate=Date | ("ray" | "par") linkedSymbol=Symbol "than" EInt | "seed maturity" |
		//	EInt ("hours" | "days" | "weeks" | "months" | "years") "after" linkedActivity=[activity::PeriodicActivity|EString]);
		public ParserRule getRule() { return rule; }

		//{activity::Predicate} ("no rained the last " EInt " days" | "temperature " linkedSymbol=Symbol "than" EInt "0C" | "t "
		//linkedSymbol=Symbol "than" linkedDate=Date | ("ray" | "par") linkedSymbol=Symbol "than" EInt | "seed maturity" | EInt
		//("hours" | "days" | "weeks" | "months" | "years") "after" linkedActivity=[activity::PeriodicActivity|EString])
		public Group getGroup() { return cGroup; }

		//{activity::Predicate}
		public Action getPredicateAction_0() { return cPredicateAction_0; }

		//"no rained the last " EInt " days" | "temperature " linkedSymbol=Symbol "than" EInt "0C" | "t " linkedSymbol=Symbol
		//"than" linkedDate=Date | ("ray" | "par") linkedSymbol=Symbol "than" EInt | "seed maturity" | EInt ("hours" | "days" |
		//"weeks" | "months" | "years") "after" linkedActivity=[activity::PeriodicActivity|EString]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"no rained the last " EInt " days"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"no rained the last "
		public Keyword getNoRainedTheLastKeyword_1_0_0() { return cNoRainedTheLastKeyword_1_0_0; }

		//EInt
		public RuleCall getEIntParserRuleCall_1_0_1() { return cEIntParserRuleCall_1_0_1; }

		//" days"
		public Keyword getDaysKeyword_1_0_2() { return cDaysKeyword_1_0_2; }

		//"temperature " linkedSymbol=Symbol "than" EInt "0C"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"temperature "
		public Keyword getTemperatureKeyword_1_1_0() { return cTemperatureKeyword_1_1_0; }

		//linkedSymbol=Symbol
		public Assignment getLinkedSymbolAssignment_1_1_1() { return cLinkedSymbolAssignment_1_1_1; }

		//Symbol
		public RuleCall getLinkedSymbolSymbolEnumRuleCall_1_1_1_0() { return cLinkedSymbolSymbolEnumRuleCall_1_1_1_0; }

		//"than"
		public Keyword getThanKeyword_1_1_2() { return cThanKeyword_1_1_2; }

		//EInt
		public RuleCall getEIntParserRuleCall_1_1_3() { return cEIntParserRuleCall_1_1_3; }

		//"0C"
		public Keyword getCKeyword_1_1_4() { return cCKeyword_1_1_4; }

		//"t " linkedSymbol=Symbol "than" linkedDate=Date
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"t "
		public Keyword getTKeyword_1_2_0() { return cTKeyword_1_2_0; }

		//linkedSymbol=Symbol
		public Assignment getLinkedSymbolAssignment_1_2_1() { return cLinkedSymbolAssignment_1_2_1; }

		//Symbol
		public RuleCall getLinkedSymbolSymbolEnumRuleCall_1_2_1_0() { return cLinkedSymbolSymbolEnumRuleCall_1_2_1_0; }

		//"than"
		public Keyword getThanKeyword_1_2_2() { return cThanKeyword_1_2_2; }

		//linkedDate=Date
		public Assignment getLinkedDateAssignment_1_2_3() { return cLinkedDateAssignment_1_2_3; }

		//Date
		public RuleCall getLinkedDateDateParserRuleCall_1_2_3_0() { return cLinkedDateDateParserRuleCall_1_2_3_0; }

		//("ray" | "par") linkedSymbol=Symbol "than" EInt
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"ray" | "par"
		public Alternatives getAlternatives_1_3_0() { return cAlternatives_1_3_0; }

		//"ray"
		public Keyword getRayKeyword_1_3_0_0() { return cRayKeyword_1_3_0_0; }

		//"par"
		public Keyword getParKeyword_1_3_0_1() { return cParKeyword_1_3_0_1; }

		//linkedSymbol=Symbol
		public Assignment getLinkedSymbolAssignment_1_3_1() { return cLinkedSymbolAssignment_1_3_1; }

		//Symbol
		public RuleCall getLinkedSymbolSymbolEnumRuleCall_1_3_1_0() { return cLinkedSymbolSymbolEnumRuleCall_1_3_1_0; }

		//"than"
		public Keyword getThanKeyword_1_3_2() { return cThanKeyword_1_3_2; }

		//EInt
		public RuleCall getEIntParserRuleCall_1_3_3() { return cEIntParserRuleCall_1_3_3; }

		//"seed maturity"
		public Keyword getSeedMaturityKeyword_1_4() { return cSeedMaturityKeyword_1_4; }

		//EInt ("hours" | "days" | "weeks" | "months" | "years") "after" linkedActivity=[activity::PeriodicActivity|EString]
		public Group getGroup_1_5() { return cGroup_1_5; }

		//EInt
		public RuleCall getEIntParserRuleCall_1_5_0() { return cEIntParserRuleCall_1_5_0; }

		//"hours" | "days" | "weeks" | "months" | "years"
		public Alternatives getAlternatives_1_5_1() { return cAlternatives_1_5_1; }

		//"hours"
		public Keyword getHoursKeyword_1_5_1_0() { return cHoursKeyword_1_5_1_0; }

		//"days"
		public Keyword getDaysKeyword_1_5_1_1() { return cDaysKeyword_1_5_1_1; }

		//"weeks"
		public Keyword getWeeksKeyword_1_5_1_2() { return cWeeksKeyword_1_5_1_2; }

		//"months"
		public Keyword getMonthsKeyword_1_5_1_3() { return cMonthsKeyword_1_5_1_3; }

		//"years"
		public Keyword getYearsKeyword_1_5_1_4() { return cYearsKeyword_1_5_1_4; }

		//"after"
		public Keyword getAfterKeyword_1_5_2() { return cAfterKeyword_1_5_2; }

		//linkedActivity=[activity::PeriodicActivity|EString]
		public Assignment getLinkedActivityAssignment_1_5_3() { return cLinkedActivityAssignment_1_5_3; }

		//[activity::PeriodicActivity|EString]
		public CrossReference getLinkedActivityPeriodicActivityCrossReference_1_5_3_0() { return cLinkedActivityPeriodicActivityCrossReference_1_5_3_0; }

		//EString
		public RuleCall getLinkedActivityPeriodicActivityEStringParserRuleCall_1_5_3_0_1() { return cLinkedActivityPeriodicActivityEStringParserRuleCall_1_5_3_0_1; }
	}
	
	
	public class MonthElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Month");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJanuaryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJanuaryJanuaryKeyword_0_0 = (Keyword)cJanuaryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFebruaryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFebruaryFebruaryKeyword_1_0 = (Keyword)cFebruaryEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMarchEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMarchMarchKeyword_2_0 = (Keyword)cMarchEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAprilEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAprilAprilKeyword_3_0 = (Keyword)cAprilEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMayEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMayMayKeyword_4_0 = (Keyword)cMayEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cJuneEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cJuneJuneKeyword_5_0 = (Keyword)cJuneEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cJulyEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cJulyJulyKeyword_6_0 = (Keyword)cJulyEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cAugustEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cAugustAugustKeyword_7_0 = (Keyword)cAugustEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSeptemberEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSeptemberSeptemberKeyword_8_0 = (Keyword)cSeptemberEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cOctoberEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cOctoberOctoberKeyword_9_0 = (Keyword)cOctoberEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNovemberEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNovemberNovemberKeyword_10_0 = (Keyword)cNovemberEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cDecemberEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cDecemberDecemberKeyword_11_0 = (Keyword)cDecemberEnumLiteralDeclaration_11.eContents().get(0);
		
		/// *Enumeration * / enum Month returns activity::Month:
		//	january | february | march | april | may | june | july | august | september | october | november | december;
		public EnumRule getRule() { return rule; }

		//january | february | march | april | may | june | july | august | september | october | november | december
		public Alternatives getAlternatives() { return cAlternatives; }

		//january
		public EnumLiteralDeclaration getJanuaryEnumLiteralDeclaration_0() { return cJanuaryEnumLiteralDeclaration_0; }

		//"january"
		public Keyword getJanuaryJanuaryKeyword_0_0() { return cJanuaryJanuaryKeyword_0_0; }

		//february
		public EnumLiteralDeclaration getFebruaryEnumLiteralDeclaration_1() { return cFebruaryEnumLiteralDeclaration_1; }

		//"february"
		public Keyword getFebruaryFebruaryKeyword_1_0() { return cFebruaryFebruaryKeyword_1_0; }

		//march
		public EnumLiteralDeclaration getMarchEnumLiteralDeclaration_2() { return cMarchEnumLiteralDeclaration_2; }

		//"march"
		public Keyword getMarchMarchKeyword_2_0() { return cMarchMarchKeyword_2_0; }

		//april
		public EnumLiteralDeclaration getAprilEnumLiteralDeclaration_3() { return cAprilEnumLiteralDeclaration_3; }

		//"april"
		public Keyword getAprilAprilKeyword_3_0() { return cAprilAprilKeyword_3_0; }

		//may
		public EnumLiteralDeclaration getMayEnumLiteralDeclaration_4() { return cMayEnumLiteralDeclaration_4; }

		//"may"
		public Keyword getMayMayKeyword_4_0() { return cMayMayKeyword_4_0; }

		//june
		public EnumLiteralDeclaration getJuneEnumLiteralDeclaration_5() { return cJuneEnumLiteralDeclaration_5; }

		//"june"
		public Keyword getJuneJuneKeyword_5_0() { return cJuneJuneKeyword_5_0; }

		//july
		public EnumLiteralDeclaration getJulyEnumLiteralDeclaration_6() { return cJulyEnumLiteralDeclaration_6; }

		//"july"
		public Keyword getJulyJulyKeyword_6_0() { return cJulyJulyKeyword_6_0; }

		//august
		public EnumLiteralDeclaration getAugustEnumLiteralDeclaration_7() { return cAugustEnumLiteralDeclaration_7; }

		//"august"
		public Keyword getAugustAugustKeyword_7_0() { return cAugustAugustKeyword_7_0; }

		//september
		public EnumLiteralDeclaration getSeptemberEnumLiteralDeclaration_8() { return cSeptemberEnumLiteralDeclaration_8; }

		//"september"
		public Keyword getSeptemberSeptemberKeyword_8_0() { return cSeptemberSeptemberKeyword_8_0; }

		//october
		public EnumLiteralDeclaration getOctoberEnumLiteralDeclaration_9() { return cOctoberEnumLiteralDeclaration_9; }

		//"october"
		public Keyword getOctoberOctoberKeyword_9_0() { return cOctoberOctoberKeyword_9_0; }

		//november
		public EnumLiteralDeclaration getNovemberEnumLiteralDeclaration_10() { return cNovemberEnumLiteralDeclaration_10; }

		//"november"
		public Keyword getNovemberNovemberKeyword_10_0() { return cNovemberNovemberKeyword_10_0; }

		//december
		public EnumLiteralDeclaration getDecemberEnumLiteralDeclaration_11() { return cDecemberEnumLiteralDeclaration_11; }

		//"december"
		public Keyword getDecemberDecemberKeyword_11_0() { return cDecemberDecemberKeyword_11_0; }
	}

	public class SymbolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Symbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSupequalsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSupequalsSupequalsKeyword_0_0 = (Keyword)cSupequalsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSupEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSupSupKeyword_1_0 = (Keyword)cSupEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualsEqualsKeyword_2_0 = (Keyword)cEqualsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cInfEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cInfInfKeyword_3_0 = (Keyword)cInfEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cInfequalsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cInfequalsInfequalsKeyword_4_0 = (Keyword)cInfequalsEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Symbol returns activity::Symbol:
		//	supequals | sup | equals | inf | infequals;
		public EnumRule getRule() { return rule; }

		//supequals | sup | equals | inf | infequals
		public Alternatives getAlternatives() { return cAlternatives; }

		//supequals
		public EnumLiteralDeclaration getSupequalsEnumLiteralDeclaration_0() { return cSupequalsEnumLiteralDeclaration_0; }

		//"supequals"
		public Keyword getSupequalsSupequalsKeyword_0_0() { return cSupequalsSupequalsKeyword_0_0; }

		//sup
		public EnumLiteralDeclaration getSupEnumLiteralDeclaration_1() { return cSupEnumLiteralDeclaration_1; }

		//"sup"
		public Keyword getSupSupKeyword_1_0() { return cSupSupKeyword_1_0; }

		//equals
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_2() { return cEqualsEnumLiteralDeclaration_2; }

		//"equals"
		public Keyword getEqualsEqualsKeyword_2_0() { return cEqualsEqualsKeyword_2_0; }

		//inf
		public EnumLiteralDeclaration getInfEnumLiteralDeclaration_3() { return cInfEnumLiteralDeclaration_3; }

		//"inf"
		public Keyword getInfInfKeyword_3_0() { return cInfInfKeyword_3_0; }

		//infequals
		public EnumLiteralDeclaration getInfequalsEnumLiteralDeclaration_4() { return cInfequalsEnumLiteralDeclaration_4; }

		//"infequals"
		public Keyword getInfequalsInfequalsKeyword_4_0() { return cInfequalsInfequalsKeyword_4_0; }
	}

	public class PeriodicElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Periodic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cYearEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cYearYearKeyword_0_0 = (Keyword)cYearEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMonthEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMonthMonthKeyword_1_0 = (Keyword)cMonthEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWeekEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWeekWeekKeyword_2_0 = (Keyword)cWeekEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDayEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDayDayKeyword_3_0 = (Keyword)cDayEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Periodic returns activity::Periodic:
		//	year | month | week | day;
		public EnumRule getRule() { return rule; }

		//year | month | week | day
		public Alternatives getAlternatives() { return cAlternatives; }

		//year
		public EnumLiteralDeclaration getYearEnumLiteralDeclaration_0() { return cYearEnumLiteralDeclaration_0; }

		//"year"
		public Keyword getYearYearKeyword_0_0() { return cYearYearKeyword_0_0; }

		//month
		public EnumLiteralDeclaration getMonthEnumLiteralDeclaration_1() { return cMonthEnumLiteralDeclaration_1; }

		//"month"
		public Keyword getMonthMonthKeyword_1_0() { return cMonthMonthKeyword_1_0; }

		//week
		public EnumLiteralDeclaration getWeekEnumLiteralDeclaration_2() { return cWeekEnumLiteralDeclaration_2; }

		//"week"
		public Keyword getWeekWeekKeyword_2_0() { return cWeekWeekKeyword_2_0; }

		//day
		public EnumLiteralDeclaration getDayEnumLiteralDeclaration_3() { return cDayEnumLiteralDeclaration_3; }

		//"day"
		public Keyword getDayDayKeyword_3_0() { return cDayDayKeyword_3_0; }
	}
	
	private ModelElements pModel;
	private ResourceTypeElements pResourceType;
	private PeriodicActivityElements pPeriodicActivity;
	private EStringElements pEString;
	private EIntElements pEInt;
	private DateElements pDate;
	private RuleElements pRule;
	private ResourceAllocationElements pResourceAllocation;
	private PredicateElements pPredicate;
	private MonthElements unknownRuleMonth;
	private SymbolElements unknownRuleSymbol;
	private PeriodicElements unknownRulePeriodic;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FarmingGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.esir.lsi.exploitation.farmingdsl.Farming".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model returns activity::Model:
	//	{activity::Model} "model" "{" ("ressourceTypes" ": " ressourceTypes+=ResourceType (","
	//	ressourceTypes+=ResourceType)*)? ("activities" "{" activities+=PeriodicActivity ("," activities+=PeriodicActivity)*
	//	"}")? "}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ResourceType returns activity::ResourceType:
	//	{activity::ResourceType} name=EString;
	public ResourceTypeElements getResourceTypeAccess() {
		return (pResourceType != null) ? pResourceType : (pResourceType = new ResourceTypeElements());
	}
	
	public ParserRule getResourceTypeRule() {
		return getResourceTypeAccess().getRule();
	}

	//PeriodicActivity returns activity::PeriodicActivity:
	//	{activity::PeriodicActivity} "PeriodicActivity " name=EString "{" ("each" periodicity=EInt
	//	periodicityLitteral=Periodic)? ("from" start=Date "to" end=Date)? ("rules" "{" rules+=Rule ("," rules+=Rule)* "}")?
	//	("allocations" "{" allocations+=ResourceAllocation ("," allocations+=ResourceAllocation)* "}")? "}";
	public PeriodicActivityElements getPeriodicActivityAccess() {
		return (pPeriodicActivity != null) ? pPeriodicActivity : (pPeriodicActivity = new PeriodicActivityElements());
	}
	
	public ParserRule getPeriodicActivityRule() {
		return getPeriodicActivityAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//Date returns activity::Date:
	//	{activity::Date} day=INT month=Month year=INT;
	public DateElements getDateAccess() {
		return (pDate != null) ? pDate : (pDate = new DateElements());
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}

	//Rule returns activity::Rule:
	//	{activity::Rule} (predicates+=Predicate (("," | "OR" | "AND") predicates+=Predicate)*)?;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//ResourceAllocation returns activity::ResourceAllocation:
	//	"resource" resource=[activity::ResourceType|EString] ("for" duration=EInt "hours")?;
	public ResourceAllocationElements getResourceAllocationAccess() {
		return (pResourceAllocation != null) ? pResourceAllocation : (pResourceAllocation = new ResourceAllocationElements());
	}
	
	public ParserRule getResourceAllocationRule() {
		return getResourceAllocationAccess().getRule();
	}

	//Predicate returns activity::Predicate:
	//	{activity::Predicate} ("no rained the last " EInt " days" | "temperature " linkedSymbol=Symbol "than" EInt "0C" |
	//	"t " linkedSymbol=Symbol "than" linkedDate=Date | ("ray" | "par") linkedSymbol=Symbol "than" EInt | "seed maturity" |
	//	EInt ("hours" | "days" | "weeks" | "months" | "years") "after" linkedActivity=[activity::PeriodicActivity|EString]);
	public PredicateElements getPredicateAccess() {
		return (pPredicate != null) ? pPredicate : (pPredicate = new PredicateElements());
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	/// *Enumeration * / enum Month returns activity::Month:
	//	january | february | march | april | may | june | july | august | september | october | november | december;
	public MonthElements getMonthAccess() {
		return (unknownRuleMonth != null) ? unknownRuleMonth : (unknownRuleMonth = new MonthElements());
	}
	
	public EnumRule getMonthRule() {
		return getMonthAccess().getRule();
	}

	//enum Symbol returns activity::Symbol:
	//	supequals | sup | equals | inf | infequals;
	public SymbolElements getSymbolAccess() {
		return (unknownRuleSymbol != null) ? unknownRuleSymbol : (unknownRuleSymbol = new SymbolElements());
	}
	
	public EnumRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}

	//enum Periodic returns activity::Periodic:
	//	year | month | week | day;
	public PeriodicElements getPeriodicAccess() {
		return (unknownRulePeriodic != null) ? unknownRulePeriodic : (unknownRulePeriodic = new PeriodicElements());
	}
	
	public EnumRule getPeriodicRule() {
		return getPeriodicAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
