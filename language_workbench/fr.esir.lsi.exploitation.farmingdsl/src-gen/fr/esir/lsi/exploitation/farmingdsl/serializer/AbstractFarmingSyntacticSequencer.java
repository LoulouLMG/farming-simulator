package fr.esir.lsi.exploitation.farmingdsl.serializer;

import com.google.inject.Inject;
import fr.esir.lsi.exploitation.farmingdsl.services.FarmingGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public abstract class AbstractFarmingSyntacticSequencer extends AbstractSyntacticSequencer {

	protected FarmingGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Predicate___NoKeyword_1_0_0_q_RainedTheLastKeyword_1_0_1_EIntParserRuleCall_1_0_2_DaysKeyword_1_0_3___or___TKeyword_1_2_0_EDateParserRuleCall_1_2_1___or___TemperatureKeyword_1_1_0_EIntParserRuleCall_1_1_1_CKeyword_1_1_2__;
	protected AbstractElementAlias match_Rule_ANDKeyword_1_1_0_2_or_CommaKeyword_1_1_0_0_or_ORKeyword_1_1_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (FarmingGrammarAccess) access;
		match_Predicate___NoKeyword_1_0_0_q_RainedTheLastKeyword_1_0_1_EIntParserRuleCall_1_0_2_DaysKeyword_1_0_3___or___TKeyword_1_2_0_EDateParserRuleCall_1_2_1___or___TemperatureKeyword_1_1_0_EIntParserRuleCall_1_1_1_CKeyword_1_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPredicateAccess().getTKeyword_1_2_0()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getEDateParserRuleCall_1_2_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPredicateAccess().getTemperatureKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getEIntParserRuleCall_1_1_1()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getCKeyword_1_1_2())), new GroupAlias(false, false, new TokenAlias(false, true, grammarAccess.getPredicateAccess().getNoKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getRainedTheLastKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getEIntParserRuleCall_1_0_2()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getDaysKeyword_1_0_3())));
		match_Rule_ANDKeyword_1_1_0_2_or_CommaKeyword_1_1_0_0_or_ORKeyword_1_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRuleAccess().getANDKeyword_1_1_0_2()), new TokenAlias(false, false, grammarAccess.getRuleAccess().getCommaKeyword_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getRuleAccess().getORKeyword_1_1_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getEDateRule())
			return getEDateToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getEIntRule())
			return getEIntToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EDate returns ecore::EDate:
	 * 	STRING ;
	 */
	protected String getEDateToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * EInt returns ecore::EInt:
	 * 	'-'? INT;
	 */
	protected String getEIntToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Predicate___NoKeyword_1_0_0_q_RainedTheLastKeyword_1_0_1_EIntParserRuleCall_1_0_2_DaysKeyword_1_0_3___or___TKeyword_1_2_0_EDateParserRuleCall_1_2_1___or___TemperatureKeyword_1_1_0_EIntParserRuleCall_1_1_1_CKeyword_1_1_2__.equals(syntax))
				emit_Predicate___NoKeyword_1_0_0_q_RainedTheLastKeyword_1_0_1_EIntParserRuleCall_1_0_2_DaysKeyword_1_0_3___or___TKeyword_1_2_0_EDateParserRuleCall_1_2_1___or___TemperatureKeyword_1_1_0_EIntParserRuleCall_1_1_1_CKeyword_1_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Rule_ANDKeyword_1_1_0_2_or_CommaKeyword_1_1_0_0_or_ORKeyword_1_1_0_1.equals(syntax))
				emit_Rule_ANDKeyword_1_1_0_2_or_CommaKeyword_1_1_0_0_or_ORKeyword_1_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Syntax:
	 *     ('t >= ' EDate) | ('no'? 'rained the last ' EInt ' days') | ('temperature > ' EInt '0C')
	 */
	protected void emit_Predicate___NoKeyword_1_0_0_q_RainedTheLastKeyword_1_0_1_EIntParserRuleCall_1_0_2_DaysKeyword_1_0_3___or___TKeyword_1_2_0_EDateParserRuleCall_1_2_1___or___TemperatureKeyword_1_1_0_EIntParserRuleCall_1_1_1_CKeyword_1_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Syntax:
	 *     ',' | 'AND' | 'OR'
	 */
	protected void emit_Rule_ANDKeyword_1_1_0_2_or_CommaKeyword_1_1_0_0_or_ORKeyword_1_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
