package fr.esir.lsi.exploitation.farmingdsl.serializer;

import com.google.inject.Inject;
import fr.esir.lsi.exploitation.farmingdsl.services.FarmingGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public abstract class AbstractFarmingSyntacticSequencer extends AbstractSyntacticSequencer {

	protected FarmingGrammarAccess grammarAccess;
	protected AbstractElementAlias match_PeriodicActivity_DaysKeyword_4_2_3_or_MonthsKeyword_4_2_1_or_WeeksKeyword_4_2_0_or_YearsKeyword_4_2_2;
	protected AbstractElementAlias match_Predicate_DaysKeyword_1_5_1_1_or_HoursKeyword_1_5_1_0_or_MonthsKeyword_1_5_1_3_or_WeeksKeyword_1_5_1_2_or_YearsKeyword_1_5_1_4;
	protected AbstractElementAlias match_Predicate_ParKeyword_1_3_0_1_or_RayKeyword_1_3_0_0;
	protected AbstractElementAlias match_Predicate_SeedMaturityKeyword_1_4_or___NoRainedTheLastKeyword_1_0_0_EIntParserRuleCall_1_0_1_DaysKeyword_1_0_2__;
	protected AbstractElementAlias match_Rule_ANDKeyword_1_1_0_2_or_CommaKeyword_1_1_0_0_or_ORKeyword_1_1_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (FarmingGrammarAccess) access;
		match_PeriodicActivity_DaysKeyword_4_2_3_or_MonthsKeyword_4_2_1_or_WeeksKeyword_4_2_0_or_YearsKeyword_4_2_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPeriodicActivityAccess().getDaysKeyword_4_2_3()), new TokenAlias(false, false, grammarAccess.getPeriodicActivityAccess().getMonthsKeyword_4_2_1()), new TokenAlias(false, false, grammarAccess.getPeriodicActivityAccess().getWeeksKeyword_4_2_0()), new TokenAlias(false, false, grammarAccess.getPeriodicActivityAccess().getYearsKeyword_4_2_2()));
		match_Predicate_DaysKeyword_1_5_1_1_or_HoursKeyword_1_5_1_0_or_MonthsKeyword_1_5_1_3_or_WeeksKeyword_1_5_1_2_or_YearsKeyword_1_5_1_4 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPredicateAccess().getDaysKeyword_1_5_1_1()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getHoursKeyword_1_5_1_0()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getMonthsKeyword_1_5_1_3()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getWeeksKeyword_1_5_1_2()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getYearsKeyword_1_5_1_4()));
		match_Predicate_ParKeyword_1_3_0_1_or_RayKeyword_1_3_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPredicateAccess().getParKeyword_1_3_0_1()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getRayKeyword_1_3_0_0()));
		match_Predicate_SeedMaturityKeyword_1_4_or___NoRainedTheLastKeyword_1_0_0_EIntParserRuleCall_1_0_1_DaysKeyword_1_0_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPredicateAccess().getNoRainedTheLastKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getEIntParserRuleCall_1_0_1()), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getDaysKeyword_1_0_2())), new TokenAlias(false, false, grammarAccess.getPredicateAccess().getSeedMaturityKeyword_1_4()));
		match_Rule_ANDKeyword_1_1_0_2_or_CommaKeyword_1_1_0_0_or_ORKeyword_1_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRuleAccess().getANDKeyword_1_1_0_2()), new TokenAlias(false, false, grammarAccess.getRuleAccess().getCommaKeyword_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getRuleAccess().getORKeyword_1_1_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getEIntRule())
			return getEIntToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EInt returns ecore::EInt:
	 * 	'-'? INT;
	 */
	protected String getEIntToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_PeriodicActivity_DaysKeyword_4_2_3_or_MonthsKeyword_4_2_1_or_WeeksKeyword_4_2_0_or_YearsKeyword_4_2_2.equals(syntax))
				emit_PeriodicActivity_DaysKeyword_4_2_3_or_MonthsKeyword_4_2_1_or_WeeksKeyword_4_2_0_or_YearsKeyword_4_2_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Predicate_DaysKeyword_1_5_1_1_or_HoursKeyword_1_5_1_0_or_MonthsKeyword_1_5_1_3_or_WeeksKeyword_1_5_1_2_or_YearsKeyword_1_5_1_4.equals(syntax))
				emit_Predicate_DaysKeyword_1_5_1_1_or_HoursKeyword_1_5_1_0_or_MonthsKeyword_1_5_1_3_or_WeeksKeyword_1_5_1_2_or_YearsKeyword_1_5_1_4(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Predicate_ParKeyword_1_3_0_1_or_RayKeyword_1_3_0_0.equals(syntax))
				emit_Predicate_ParKeyword_1_3_0_1_or_RayKeyword_1_3_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Predicate_SeedMaturityKeyword_1_4_or___NoRainedTheLastKeyword_1_0_0_EIntParserRuleCall_1_0_1_DaysKeyword_1_0_2__.equals(syntax))
				emit_Predicate_SeedMaturityKeyword_1_4_or___NoRainedTheLastKeyword_1_0_0_EIntParserRuleCall_1_0_1_DaysKeyword_1_0_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Rule_ANDKeyword_1_1_0_2_or_CommaKeyword_1_1_0_0_or_ORKeyword_1_1_0_1.equals(syntax))
				emit_Rule_ANDKeyword_1_1_0_2_or_CommaKeyword_1_1_0_0_or_ORKeyword_1_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Syntax:
	 *     ' days' | 'months' | 'years' | 'weeks'
	 */
	protected void emit_PeriodicActivity_DaysKeyword_4_2_3_or_MonthsKeyword_4_2_1_or_WeeksKeyword_4_2_0_or_YearsKeyword_4_2_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Syntax:
	 *     'hours' | 'weeks' | 'years' | 'days' | 'months'
	 */
	protected void emit_Predicate_DaysKeyword_1_5_1_1_or_HoursKeyword_1_5_1_0_or_MonthsKeyword_1_5_1_3_or_WeeksKeyword_1_5_1_2_or_YearsKeyword_1_5_1_4(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Syntax:
	 *     'par' | 'ray'
	 */
	protected void emit_Predicate_ParKeyword_1_3_0_1_or_RayKeyword_1_3_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Syntax:
	 *     'seed maturity' | ('no rained the last ' EInt ' days')
	 */
	protected void emit_Predicate_SeedMaturityKeyword_1_4_or___NoRainedTheLastKeyword_1_0_0_EIntParserRuleCall_1_0_1_DaysKeyword_1_0_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Syntax:
	 *     'AND' | ',' | 'OR'
	 */
	protected void emit_Rule_ANDKeyword_1_1_0_2_or_CommaKeyword_1_1_0_0_or_ORKeyword_1_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
